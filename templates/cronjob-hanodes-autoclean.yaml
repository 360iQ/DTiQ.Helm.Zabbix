{{- if .Values.zabbixserver.ha_nodes_autoclean.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ template "zabbix.fullname" . }}-nodesclean
  labels:
    app: {{ template "zabbix.fullname" . }}-nodesclean
    app.kubernetes.io/name: nodesclean
    helm.sh/chart: {{ include "zabbix.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}-nodesclean
    app.kubernetes.io/managed-by: {{ .Release.Service }}-nodesclean
spec:
  schedule: {{ .Values.zabbixserver.ha_nodes_autoclean.schedule|quote }}
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: hanodes-autoclean
            image: {{ .Values.zabbixserver.ha_nodes_autoclean.image.repository }}:{{ .Values.zabbixserver.ha_nodes_autoclean.image.tag }}
            imagePullPolicy: {{ .Values.zabbixserver.ha_nodes_autoclean.image.pullPolicy }}
            command:
            - /bin/bash
            - -c
            - echo "deleting all stopped and unavailable HANodes older than {{ .Values.zabbixserver.ha_nodes_autoclean.delete_older_than_seconds }} seconds..." && psql -c "delete from ha_node where status in (1,2) and extract(epoch from now())-lastaccess>{{ .Values.zabbixserver.ha_nodes_autoclean.delete_older_than_seconds }}"
            env:
            {{- if .Values.postgresql.enabled }}
            - name: PGHOST
              value: {{ template "zabbix.fullname" . }}-postgresql
            - name: PGPORT
              value: {{ .Values.postgresql.service.port | quote }}
            {{- else if .Values.db_access.use_unified_secret }}
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db_access.unified_secret_name }}
                  key: host
            - name: PGPORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db_access.unified_secret_name }}
                  key: port
                  optional: true
            {{- else }}
            - name: PGHOST
              value: {{ .Values.db_access.db_server_host | quote }}
            - name: PGPORT
              value: {{ .Values.db_access.db_server_port | quote }}
            {{- end }}
            {{- if .Values.db_access.use_unified_secret }}
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db_access.unified_secret_name }}
                  key: user
                  optional: true
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db_access.unified_secret_name }}
                  key: password
            - name: PGDATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db_access.unified_secret_name }}
                  key: dbname
                  optional: true
            {{- else }}
            - name: PGUSER
              value: {{ .Values.db_access.postgres_user | quote }}
            - name: PGPASSWORD
              {{- if .Values.db_access.postgres_password_secret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db_access.postgres_password_secret }}
                  key: {{ default "password" .Values.db_access.postgres_password_secret_key }}
              {{- else  }}
              value: {{ .Values.db_access.postgres_password | quote }}
              {{- end }}
            - name: PGDATABASE
              value: {{ .Values.db_access.postgres_db | quote }}
            {{- end }}
          imagePullSecrets:
          {{- range .Values.zabbixserver.image.pullSecrets }}
            - name: {{ . | quote }}
          {{- end }}
          restartPolicy: OnFailure
{{- end }}
